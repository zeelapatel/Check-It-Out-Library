package com.example.demo.controller;

import java.util.List;

import java.util.Map;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.entity.AssignBooks;
import com.example.demo.entity.Student;
import com.example.demo.services.BooksService;
import com.example.demo.services.StudentService;

@RestController
public class StudentController {

	private final StudentService service;
    private final BooksService booksService;

    public StudentController(StudentService service, BooksService booksService) {
        this.service = service;
        this.booksService = booksService;
    }

	private long studentid;
	 
	@PostMapping("/addstudent")
	public Student addstudent(@RequestBody Student student) {
		return service.saveStudent(student) ;
		
	}
	
	@PostMapping("/studentLogin")
	public ResponseEntity<String> verifyCredentials(@RequestBody Map<String, String> credentials) {
	    String email = credentials.get("email");
	    String password = credentials.get("password");
	    
	    Student student = service.verifyCredentials(email, password);

        if (student != null) {
            // Capture the id and name
            Long sid = student.getStudid();
            studentid = sid;
            String name = student.getFirstName() + " " + student.getLastName();

            // Create a response message
            String response = "Credentials are valid! Student Id: " + sid + ", Name: " + name;

            System.out.println(response);
            // Return the response with a status code of 200 (OK)
            return ResponseEntity.ok(response);
        } else {
            // Return an error response with a status code of 401 (Unauthorized)
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Invalid credentials!");
        }
	}
	
	@GetMapping("/search/studentbooks")
    public ResponseEntity<List<AssignBooks>> getBooksByStudentId() {
        // Use the service method to get the list of books by student ID
        List<AssignBooks> books = booksService.getBooksByStudentId(studentid);

        if (!books.isEmpty()) {
            // Return the list of books with a status code of 200 (OK)
            return ResponseEntity.ok(books);
        } else {
            // Return a not found response with a status code of 404
            return ResponseEntity.notFound().build();
        }
    }

	
}
